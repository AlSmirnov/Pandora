
Что сделать
(- не сделано, = начато, + сделано):

- удаление трёх видов: физическое/пометка + игнор-связь
- в списке "узлы" две вкладки: узлы из базы, узлы из списка подключенных
- в окне "диалог" еще одна вкладка: "игра"
= в окне "статья" три вкладки: вид, вики/код, голый текст/байт-редактор
= в каждом окне вкладка "Служебное": язык, панхэш, автор, флаги "отправлено", "изменено"
= работа с ключами: генерация, активация
+ работа с подписями: создание, проверка
+ шифрование/расшифровывание
+ инициализация связи
= пустой цикл/проверка живости
+ сообщения
+ запуск медиа-потока, прием потока
- возможны пять видов подключения:
  1) первичное, для полноценного обмена (прямое соединение, или труба)
  при этом могут существовать публичные узлы, поддерживающие отдачу публичных данных (например,
  энциклопедических статей или анкет исторических деятелей) без авторизации
  2) вторичное встречное, для проверки обратного адреса и порта (если новый, или изменились)
  3) упрощенное, чтобы другие оствляли текстовые сообщения (без авторизации, но с капчой)
  4) веб-морда на отдельном порту для самого себя, чтобы удаленно управлять своим узлом
  5) возможно, на отдельном порту сервис xmpp
  упрощенные узлы могут работать в качестве шлюзов текстовых сообщений
- пандора-шлюзы существуют для "сбора" соединений на подключившегося "агента",
  могут быть написаны на других ЯП (питоне, пхп), запускаются на хостах с ip доступными извне,
  например, на узлах хостеров. шлюзы имеют упрощенную авторизацию для агентов и просто перенаправляют
  трафик с подключившихся охотников на агента в формате "труба". при этом шлюз может иметь примитивную
  фильтрацию трафика, например, при попытке передать видео или превышении лимита, отрубать охотников
= инициализация сеанса: в приветствии "кто"-"кому". если неизвестен ip, "кто" или "кому", то задается хэш-задачка,
  также неизвестным задается каптча, и всем задается подписать фразу. для хэш-задачки высылается фраза размером
  256 байт, где последним байтом задается размер пар бит N загадки с начала фразы, а предпоследним - число секунд M.
  отгадка - это фраза, плюс некоторое число любых байт найденых перебором так, чтобы первые N пар бит хэша
  sha256 от отгадки совпали с загадкой. если охотник нашел отгадку, то спустя M секунд пересылает "добавку"
  слушателю, если прислал позже или равно M секунд, то слушатель добавляет её к фразе и берет хэш,
  если совпало, идет дальше (запрашивает подпись), инчае банится на 15 минут.
  также охотник банится на 3 минуты, если отключился без ответа на загадку.
  банлист динамический (в RAM) и набирает штрафные баллы увеличивая время бана при повторных косяках.
  хэш-задачка может быть: отключена, включена для неизвестных ключей (по умолчанию), включена для всех
  эта же фраза используется для подписания. но подписывается не сама фраза, а хэш384 от нее, что
  предотвращает подсовывание на подпись осмысленных данных. каптча задается уже после подписания, если ключ
  неизвестный, после чего ключ помещается в "отстойник". если капча пришла, то ключ переводится на подтверждение,
  когда доверие установлено (ключ подтвержден), тогда возможен полноценный обмен.
  до авторизации с доверием узлы находтся в списке по "ip, port", после - в списке "key, base_id".
  до полноценной  авторизации другие подключения с данного "ip" блокируются
- бан-лист ip в памяти. штрафовать:
  1) подключился и отключился - 1 мин
  2) подключился, отправил хело, но не ответил на хэш-загадку - 2 мин
  3) прислал отгадку раньше срока - 30 сек
  4) прислал неверную отгадку - 10 мин
  5) прислал отгадку в срок и верную, но отключился, не прислав подписи - 2 мин
  6) прислал неверную подпись - 10 мин
  7) прислал неверную капчу - 2 мин
  8) подключился повторно раньше чем через 5 мин, хотя был ответ "ключ на рассмотрении" - 5 мин
  9) при повторном нарушении сроки штрафов суммируются и удваиваются
  10) замолчал во время связи и не отвечает более 1 мин - 1 мин
  11) прислал неадекватный сегмент для текущей стадии - 5 мин
  12) авторизация с одного ip со вторым неизвестным ключом с интервалом менее 2 ч - 15 мин
  узлы-штрафники могут быть подписанны и разойдутся как негодяи
- условия, исключающие хэш-загадку и капчу (но не исключающие подпись):
  1) ip есть в списке узлов и помечен как статический
  2) есть в ram-списке недавно авторизованных узлов
  такие узлы не подвергаются мелким штрафам, но сумма штрафа накапливается, а при достижении 30 мин
  узел банится и низвергается до обычного (с хэш-загадкой и капчой)
- запись при обмене
  +1) запрос и запись ключа до авторизации (в память?)
  =2) запись/обновление узла (и ключа?) после авторизации
  +3) запрос и запись анкеты (если ключ доверен)
  =4) установление связи "пришел с", если рыбалка, или отдельный узел?
  -5) запрос новостей, запрос других записей и их запись
- "обязательно сверяйте ключ по телефону! отзывайте доверие, если ключ не прошел сверку!"
  "сверка": тип (ключ, хэш256, хэш384..), длина (6), позиция (случайно, 1,2..)
  возможно стоит разрешить голосовую сверку после капчи (с предварительным запросом) с записью разговора
- сборщик мусора запукается чз 20 мин после старта и подчищает "тухлятину": у чего вышел срок 5 дней и не было
  оказано поддержка или доверие. подчищаются без поддержки чз 5 дней, или поддерживаемые с доверием меньше -0.5.
  сборщик работает неспеша, засыпает на 1 сек после каждой операции, а если есть медиа-обмен, то замораживается.
  при сворачивании или бездействии интервал сокращается до 0.3 сек, при отсутствии соединений до 0.2,
  а при выключенном слушателе до 0.1 сек. 5 дней могут быть и больше для записей от доверенных создателей
- работа с каналами (медиа, игра): запуск, пауза, останов, закрытие
- приоритет отдачи данных: сообщения, (игра,) звук, видео, записи
- если есть потери, снижать нагрузку: замедлять записи, снижать качество видео, аудио
- параметры есть общие (creator=nil), а есть личные (creator задан), указывается при записи,
  при чтении сначала ищется личный, если не найдет, читается общий
- симметричный ключ для шифрования локальных данных (сообщений) зашифрован на ассиметричном,
  создаётся автоматически при необходимости, хранится в отдельном личном параметре
- сеансовый ключ, создается при сеансе связи, прикрепляется к ключу собеседника, шифруется на симметричном
  ключе для локальных данных, панхэш которого также записывается в тело
- всего 3 типа ключа: 1) открытый, тело содержит только ключ, 2) закрытый паролем, тело содержит IV и шифроблок,
  3) локальный или сеансовый (шифрован на другом), тело содержит панхэш ключа и шифроблок
- настройки кодеков и конвейеров
  видеокодеки vp8, theora, jpeg, smoke, x264, h264, vp9, аудиокодеки speex, vorbis, opus, mulaw,
  параметры: источники (win, lin), кодеки, входные и выходные конвейеры,
  в окне "диалог" возможность выбирать кодеки передачи, а также и контейнер при записи в файл
- обмен патчами, записями
- защита от ддоса: объем пакетов до авторизации ограничен 1200 байт, число шагов не более 5,
  объем трафика от неавторизованных узлов не более 3*(1200*5)байт/час, если нарушил - бан на сутки
- поиск соседей в сети, возможно широковещалкой, а возможно перебором адресов
- проброс соединений: охотник A запрашивает у слушателя B проброс на узел C.
  если C подключен, ему сообщается
  если C отключен, но слушает, к нему подключается
  если C отключен и не отзывается, A запрашивает у B "рыбалку" узла C
  вопрос B рыбаку A: будет ждать (10 мин макс) или периодически подключаться (каждую 1 мин)?
  если A ждет - он висячий рыбак
  если A периодически опрашивает - он прыгающий рыбак
  если C подключился к B, то B сообщает C что на него идет рыбалка от A, далее одно из трёх:
  * C подключается к узлу A напрямую при встречном простреле NATов
  * начинается разговор между A и C через B, если еще A висит
  * узел B даёт узлу C время на встречную висячую рыбалку узла A (10 минут), если A прыгающий
  если прыгающий A появился за это время, их соединяют, если нет - оба рыбака снимаются с рыбалки
  рыбаки снимаются с рыбалки также по таймауту (10 мин)
  на узле B задается максимальное число заявок на рыбалку, например 500
  кроме того задается максимальное число подключенных рыбаков, например 20
  в заявке на рыбалку может фигурировать не только узел, но и панхеш человека или ключа
  узел B может задавать ограничения на объем трафика в ед. времени или запретить медиа-обмен
  Узел B может задать ограничения на типы сегментов: прострел, сообщения и т.п.
  Также B может требовать шифрование только на ключе B, нераспознанные сегменты могут быть запрещены.
  Рыбалка может быть многоуровневой: A спросил C у B, B переправил заявку D, E, F и т.д.
  Примитивные посредники могут быть написаны на php, python, C и т.п., и работать на хостинге.
- автоматическое конвертирование при изменении структры базы
- расчет рейтинга ключей, людей и других записей; с учетом активного юзера и без;
  запись рейтингов ключей в базу, пересчет и измнение при получении новой записи
- шедулер, который пасёт каталог/файл и при его изменении, подгружает записи
- шедулер, который пасёт таблицу в базе и при её изменении, импортирует записи
= редактор кода, файл pandora.rb как один из документов
- отчеты в формате ODF, логика их расчета в отдельных модулях
  Универсальная форма печати "Объект Пандора" - выберите формат A4,A3 и т.д.
- если мнение не "публично", то оно адресовано только создателю объекта?
- публикация в виде: 1) поле "публикатор", "дата" у записи; 2) связь "опубликовал"
  связь "публикую" содержит значение: (255-диапазон)..255 = (255-20)..255, 235..255.
- прострел NATов через: UPnP (IGD?) - for local, NAT-PMP, STUN, SOCKS, NAT-T (in IKE),
  TURN, RSIP, MIDCOM, ICE, Teredo(miredo), SBC, SYN-TCP, UDP-pounching, ALG
= написать документацию: для юзера, админа и хакера
- цвет вкладки: узлы отключены, подключены всё, подключены не все, получено сообщение, есть голос/видео
- шифровать закрытый ключ алгоритмом AESом на паре p/q из располовиненого блока:
  хэш384(xor146(пахэш юзера+хэш256(rot13(дата создания+(хэш256 пароля)))), использовать xor-наложение одной
  половины каждого значения на другое, чтобы перемешать данные. в этом случае: а) атака через радужные
  таблицы потеряет смысл; б) время перебора заметно удлинится; в) исходные пароль аналитически не вычисляем.
- подпись на хэш384 для ключа и хэш256 для остальных записей
- сеанс связи: приветствие, капча (открывается в диалоге, даётся 5 мин, 3 попытки), запрос ключа/персоны,
  ключ принимается в состоянии "закодирован" и ждет подписания (доверия), до того как ключ раскодирован/сверен
  сеансы связи обрываются, после - возможны.
- запись невозможна пока не введены обязательные поля (required=min_len)
- выбор панхэша во всплывающем окне со списком объектов
- наличие фильтра в списке объектов и его использование при: выборе панхэша, в доп. вкладках при вводе
- возможность генерировать симметричные ключи: а) в самом окне ввода; б) отдельной функцией?
- для доверенных (>0.5) кнопка "вызов" в диалоге, при этом проигрывается заданный муз. файл
  для доверенных их звук (>0.6) и видео (>0.7) без подтверждения, для остальных - с подтверждением
- для особо доверенных даже можно мою исходящую камеру (=1.0) и звук (>0.95) разрешать самим включать,
  но для этого на должна быть нажата специальная кнопка "можно слушать супердоверенным",
  также перед включением прослушки/просмотра проигрываются отдельны(й,е) файл(ы) (или "вызов"),
  возможно робот прогаваривает "вас просматривает/прослушивает два-эф-пять-три-цэ" (панхэш)
- сразу после подключения собеседник видит, что ему можно (появляются нужные галочки и кнопки)
- собеседник также видит список поддерживаемых вашей стороной аудио и видео кодеков (в виде списка)
- три режима охоты: ручная, интенсивная (каждые 5 мин, если на месте), редкая (каждые 15 мин, отошёл)
  охота включается автоматически, если нажата кнопка "auto_hunt" и задан соответствующий параметр
  для не совсем доверенных узлов охота пропускается: 0.35-0.7 через раз, 0.0-0.35 через два.
  возможны другие формулы охоты в зависимости от уровня доверия, и от того, включен слушатель или нет
  если слушатель включен, то охоту, сделав раз, можно делать или реже, или вообще приостанавливать
- при повторном запуске, если та же самая база, открывать предыдущую
